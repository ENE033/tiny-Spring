<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">


    <!--    <bean id="myPostFactoryProcessor" class="common.MyBeanFactoryPostProcessor"/>-->

    <!--    <bean id="myPostProcessor" class="common.MyBeanPostProcessor"/>-->

    <!--    <bean id="pet" class="entity.Pet">-->
    <!--        <property name="age" Value="2"/>-->
    <!--        <property name="name" Value="peter"/>-->
    <!--    </bean>-->

    <!--    <bean id="user" class="entity.User">-->
    <!--        <property name="age" value="${age}"/>-->
    <!--        <property name="name" value="${name}"/>-->
    <!--        <property name="pet" ref="pet"/>-->
    <!--    </bean>-->

    <!--    <bean id="pet1" class="entity.Pet">-->
    <!--        <property name="age" value="78416"/>-->
    <!--        <property name="name" value="ewqrwet"/>-->
    <!--    </bean>-->

    <!--            <bean id="userDao" class="entity.UserDao" init-method="initMethod" destroy-method="destroy"/>-->

    <!--            <bean id="knownAll" class="entity.aware.KnownAll"/>-->

    <!--            <bean id="iPetDaoProxy" class="entity.IPetDaoProxy"/>-->

    <!--            <bean id="petService" class="entity.PetService">-->
    <!--                <property name="iPetDao" ref="iPetDaoProxy"/>-->
    <!--            </bean>-->

    <!--        <bean id="contextClosedEventListener" class="entity.event.ContextClosedEventListener"/>-->
    <!--        <bean class="entity.event.ContextRefreshedEventListener" id="contextRefreshedEventListener"/>-->
    <!--        <bean class="entity.event.CustomEventListener" id="customEventListener"/>-->

    <bean id="blog" class="entity.aop.Blog"/>

    <bean id="userService" class="entity.aop.UserService"/>

    <bean id="autoProxyCreator"
          class="springframework.aop.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>

    <bean id="beforeAdvice" class="entity.aop.UserServiceBeforeAdvice"/>

    <bean id="beforeAdviceInterceptor"
          class="springframework.aop.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor">
        <property name="methodBeforeAdvice" ref="beforeAdvice"/>
    </bean>

    <bean id="advisor" class="springframework.aop.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <property name="expression" value="execution(* entity.aop.UserService.*(..))"/>
        <property name="advice" ref="beforeAdvice"/>
    </bean>

    <bean id="afterReturnAdvice" class="entity.aop.UserServiceAfterReturnAdvice"/>

    <bean id="advisor2" class="springframework.aop.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <property name="expression" value="execution(* entity.aop.*.*(..))"/>
        <property name="advice" ref="afterReturnAdvice"/>
    </bean>

    <bean id="peerInterceptor" class="entity.aop.PeerInterceptor"/>

    <bean id="advisor3" class="springframework.aop.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
        <property name="expression" value="execution(* entity.aop.*.*(..))"/>
        <property name="advice" ref="peerInterceptor"/>
    </bean>

    <context:component-scan base-package="entity"/>

    <!--    <bean class="springframework.beans.factory.PropertyPlaceholderConfigurer" id="configurer">-->
    <!--        <property name="location" value="property.properties"/>-->
    <!--    </bean>-->

</beans>